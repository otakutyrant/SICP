(load ("../../procedures.scm"))

#TODO

(define (search element sequence)
  (define (search-iter element sequence index)
    (if (null? sequence)
      -1
      (if (= element (car sequence))
        index
        (search-iter element (cdr sequence) (+ 1 index))
      )
    )
  )
  (search-iter element sequence 1)
)
(search 1 (list 2 3 1))
(define empty-board ())
(define (safe? k positions)
  (define k-position (list-ref positions (- k 1)))
  (define rest-of-positions (remove k-position positions))
  (define (same-position? position) (= position k-position))
  (define (diagnoal? position)
    (define index (search position rest-of-positions))
    (= (abs (- k index)) (abs (- position k-position)))
  )
  (and
    (null? (filter same-position? rest-of-positions))
    (null? (filter diagnoal? rest-of-positions))
  )
)
(safe? 3 (list 1 3 5))
(safe? 3 (list 1 3 4))
(define (queens board-size)
  (define (adjoin-position new-row k rest-of-queens)
    (map
      (lambda (queens) (append queens (list new-row)))
      rest-of-queens
    )
  )
  (define (queen-cols k)
    (if (= k 0)
      (list empty-board)
      (filter (lambda (positions) (safe? k positions))
        (flatmap
          (lambda (rest-of-queens)
            (map
              (lambda (new-row)
                (adjoin-position new-row k rest-of-queens)
              )
              (enumerate-interval 1 board-size)
            )
          )
          (queen-cols (- k 1))
        )
      )
    )
  )
  (queen-cols board-size)
)
(queens 8)
