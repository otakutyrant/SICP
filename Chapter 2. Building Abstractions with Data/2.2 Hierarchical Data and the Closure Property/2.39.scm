(define (accumulate procedure init-value list)
  (if
    (null? list)
    init-value
    (procedure (car list) (accumulate procedure init-value (cdr list)))
  )
)
(define fold-right accumulate)
(define (reverse sequence)
  (fold-right (lambda (x y) (append y (list x))) () sequence)
)
(reverse (list 1 2 3))
(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
        result
        (iter (op result (car rest)) (cdr rest))
    )
  )
  (iter initial sequence)
)
(define (reverse sequence)
  (fold-left (lambda (x y) (cons y x)) () sequence)
)
(reverse (list 1 2 3))
