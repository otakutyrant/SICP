(define (accumulate procedure init-value list)
  (if
    (null? list)
    init-value
    (procedure (car list) (accumulate procedure init-value (cdr list)))
  )
)
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
    ()
    (cons
      (accumulate op init
        (map (lambda (x) (car x)) seqs)
      )
      (accumulate-n op init
        (map (lambda (x) (cdr x)) seqs)
      )
    )
  )
)
(define a (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)))
(accumulate-n + 0 a)

(define (dot-product v w)
  (accumulate + 0 (map * v w))
)
(define (matrix-*-vector m v)
  (map (lambda (row) (dot-product row v)) m)
)
(define a (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)))
(matrix-*-vector a (list 1 1 1))
(define (transpose mat)
  (accumulate-n (lambda (x y) (cons x y)) () mat)
)
(transpose a)
(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (row) (matrix-*-vector n row)) m)
  )
)
(define b (list (list 1 0) (list 0 1) (list 0 0)))
(matrix-*-matrix a b)
